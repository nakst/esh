// TODO:
// - Element specific: MDIClientGetActiveChild MDIClientSetActiveChild MenuCreate MenuIsOpen MenuShow SwitcherSwitchTo
// - Fonts: FontActivate FontCreate FontGetGlyphHeight FontGetGlyphWidth CodeSetFont
// - Invoke callbacks: ButtonSetInvoke CheckboxSetInvoke MenuAddItem WindowRegisterShortcut
// - Returning elements: ParentPop ParentPush WindowGetFocusedElement WindowGetHoveredElement WindowGetPressedElement
// - Complicated: ElementMessage
// - Message data: MSG_CODE_DECORATE_LINE MSG_GET_CHILD_STABILITY MSG_PRESSED_DESCENDENT MSG_WINDOW_DROP_FILES

#library "module_luigi";
#import "core:modules/geometry" gm;
#import "core:modules/imaging" im;

handletype Element;
handletype Button       : Element;
handletype Checkbox     : Element;
handletype Code         : Element;
handletype Gauge        : Element;
handletype Label        : Element;
handletype ImageDisplay : Element;
handletype MDIChild     : Element;
handletype MDIClient    : Element;
handletype Menu         : Element;
handletype Panel        : Element;
handletype ScrollBar    : Element;
handletype Slider       : Element;
handletype Spacer       : Element;
handletype SplitPane    : Element;
handletype Switcher     : Element;
handletype TabPane      : Element;
handletype Table        : Element;
handletype Textbox      : Element;
handletype Window       : Element;
handletype WrapPanel    : Element;

handletype Painter;
handletype Font;

functype int MessageCallback(Element element, Message message, int di, anytype dp);
functype void InvokeCallback(anytype cp);

inttype ElementFlags {
	ELEMENT_V_FILL      = 1 << 16;
	ELEMENT_H_FILL      = 1 << 17;
	ELEMENT_WINDOW      = 1 << 18;
	ELEMENT_PARENT_PUSH = 1 << 19;
	ELEMENT_TAB_STOP    = 1 << 20;
	ELEMENT_NON_CLIENT  = 1 << 21;
	ELEMENT_DISABLED    = 1 << 22;
	ELEMENT_BORDER      = 1 << 23;

	ELEMENT_FILL = (1 << 16) | (1 << 17);
};

inttype WindowFlags : ElementFlags {
	WINDOW_MENU            = 1 << 0;
	WINDOW_INSPECTOR       = 1 << 1;
	WINDOW_CENTER_IN_OWNER = 1 << 2;
	WINDOW_MAXIMIZE        = 1 << 3;
};

inttype PanelFlags : ElementFlags {
	PANEL_HORIZONTAL     = 1 << 0;
	PANEL_COLOR_1        = 1 << 2;
	PANEL_COLOR_2        = 1 << 3;
	PANEL_SMALL_SPACING  = 1 << 5;
	PANEL_MEDIUM_SPACING = 1 << 6;
	PANEL_LARGE_SPACING  = 1 << 7;
	PANEL_SCROLL         = 1 << 8;
	PANEL_EXPAND         = 1 << 9;
};

inttype ButtonFlags : ElementFlags {
	BUTTON_SMALL     = 1 <<  0;
	BUTTON_MENU_ITEM = 1 <<  1;
	BUTTON_CAN_FOCUS = 1 <<  2;
	BUTTON_DROP_DOWN = 1 <<  3;
	BUTTON_CHECKED   = 1 << 15;
};

inttype CheckboxFlags : ElementFlags {
	CHECKBOX_ALLOW_INDETERMINATE = 1 << 0;
};

inttype CodeFlags : ElementFlags {
	CODE_NO_MARGIN = 1 << 0;
};

inttype GaugeFlags : ElementFlags {
	GAUGE_VERTICAL = 1 << 0;
};

inttype SliderFlags : ElementFlags {
	SLIDER_VERTICAL = 1 << 0;
};

inttype MDIClientFlags : ElementFlags {
	MDI_CLIENT_TRANSPARENT = 1 << 0;
};

inttype ScrollBarFlags : ElementFlags {
	SCROLL_BAR_HORIZONTAL = 1 << 0;
};

inttype SplitPaneFlags : ElementFlags {
	SPLIT_PANE_VERTICAL = 1 << 0;
};

inttype TextboxFlags : ElementFlags {
	TEXTBOX_HIDE_CHARACTERS = 1 << 0;
};

inttype MenuFlags {
	MENU_PLACE_ABOVE = 1 << 0;
	MENU_NO_SCROLL = 1 << 1;
};

inttype ImageDisplayFlags {
	IMAGE_DISPLAY_INTERACTIVE = 1 << 0;
};

inttype Message {
	// General messages.
	MSG_PAINT = 0; // dp:cast(Painter)
	MSG_PAINT_FOREGROUND = 1;
	MSG_LAYOUT = 2;
	MSG_DESTROY = 3;
	MSG_DEALLOCATE = 4;
	MSG_UPDATE = 5;
	MSG_ANIMATE = 6;
	MSG_SCROLLED = 7;
	MSG_GET_WIDTH = 8;
	MSG_GET_HEIGHT = 9;
	MSG_GET_CHILD_STABILITY = 10; // dp:cast(Element)

	// Input events.
	MSG_INPUT_EVENTS_START = 11;
	MSG_LEFT_DOWN = 12;
	MSG_LEFT_UP = 13;
	MSG_MIDDLE_DOWN = 14;
	MSG_MIDDLE_UP = 15;
	MSG_RIGHT_DOWN = 16;
	MSG_RIGHT_UP = 17;
	MSG_KEY_TYPED = 18; // dp:cast(KeyTyped)
	MSG_KEY_RELEASED = 19; // dp:cast(KeyTyped)
	MSG_MOUSE_MOVE = 20;
	MSG_MOUSE_DRAG = 21;
	MSG_MOUSE_WHEEL = 22;
	MSG_CLICKED = 23;
	MSG_GET_CURSOR = 24;
	MSG_PRESSED_DESCENDENT = 25; // dp:cast(Element)
	MSG_INPUT_EVENTS_END = 26;

	// Specific elements.
	MSG_VALUE_CHANGED = 27;
	MSG_TABLE_GET_ITEM = 28; // dp:cast(TableGetItem)
	MSG_CODE_GET_MARGIN_COLOR = 29;
	MSG_CODE_DECORATE_LINE = 30; // dp:cast(CodeDecorateLine)
	MSG_TAB_SELECTED = 31;

	// Windows.
	MSG_WINDOW_DROP_FILES = 32; // dp:cast(str[])
	MSG_WINDOW_ACTIVATE = 33;
	MSG_WINDOW_CLOSE = 34;
	MSG_WINDOW_UPDATE_START = 35;
	MSG_WINDOW_UPDATE_BEFORE_DESTROY = 36;
	MSG_WINDOW_UPDATE_BEFORE_LAYOUT = 37;
	MSG_WINDOW_UPDATE_BEFORE_PAINT = 38;
	MSG_WINDOW_UPDATE_END = 39;

	// User-defined messages.
	MSG_USER = 40;
};

inttype Cursor {
	CURSOR_ARROW = 0;
	CURSOR_TEXT = 1;
	CURSOR_SPLIT_V = 2;
	CURSOR_SPLIT_H = 3;
	CURSOR_FLIPPED_ARROW = 4;
	CURSOR_CROSS_HAIR = 5;
	CURSOR_HAND = 6;
	CURSOR_RESIZE_UP = 7;
	CURSOR_RESIZE_LEFT = 8;
	CURSOR_RESIZE_UP_RIGHT = 9;
	CURSOR_RESIZE_UP_LEFT = 10;
	CURSOR_RESIZE_DOWN = 11;
	CURSOR_RESIZE_RIGHT = 12;
	CURSOR_RESIZE_DOWN_RIGHT = 13;
	CURSOR_RESIZE_DOWN_LEFT = 14;
};

inttype Align {
	ALIGN_LEFT = 1;
	ALIGN_RIGHT = 2;
	ALIGN_CENTER = 3;
};

inttype UpdateCode {
	UPDATE_HOVERED = 1;
	UPDATE_PRESSED = 2;
	UPDATE_FOCUSED = 3;
	UPDATE_DISABLED = 4;
};

struct Shortcut {
	int code;
	bool ctrl;
	bool shift;
	bool alt;
	InvokeCallback invoke;
	anytype cp;
};

struct StringSelection {
	int caret0;
	int caret1;
	int colorText;
	int colorBackground;
};

struct KeyTyped {
	str text;
	int code;
};

struct CodeDecorateLine {
	gm.Rectangle bounds;
	int index;
	int x;
	int y;
	Painter painter;
};

struct TableGetItem {
	// Inputs.
	int index;
	int column;

	// Outputs.
	str text;
	bool isSelected;
};

struct Theme {
	int panel1;
	int panel2;
	int selected;
	int border;
	int text;
	int textDisabled;
	int textSelected;
	int buttonNormal;
	int buttonHovered;
	int buttonPressed;
	int buttonDisabled;
	int textboxNormal;
	int textboxFocused;
	int codeFocused;
	int codeBackground;
	int codeDefault;
	int codeComment;
	int codeString;
	int codeNumber;
	int codeOperator;
	int codePreprocessor;
};

int MessageLoop() #extcall;

Button ButtonCreate(Element parent, ButtonFlags flags, str label) #extcall;
Checkbox CheckboxCreate(Element parent, CheckboxFlags flags, str label) #extcall;
Code CodeCreate(Element parent, CodeFlags flags) #extcall;
Gauge GaugeCreate(Element parent, GaugeFlags flags) #extcall;
Label LabelCreate(Element parent, ElementFlags flags, str label) #extcall;
ImageDisplay ImageDisplayCreate(Element parent, ImageDisplayFlags flags, im.Bitmap bitmap) #extcall;
MDIChild MDIChildCreate(Element parent, ElementFlags flags, gm.Rectangle initialBounds, str title) #extcall;
MDIClient MDIClientCreate(Element parent, MDIClientFlags flags) #extcall;
Panel PanelCreate(Element parent, PanelFlags flags) #extcall;
ScrollBar ScrollBarCreate(Element parent, ScrollBarFlags flags) #extcall;
Slider SliderCreate(Element parent, SliderFlags flags) #extcall;
Spacer SpacerCreate(Element parent, ElementFlags flags, int width, int height) #extcall;
SplitPane SplitPaneCreate(Element parent, SplitPaneFlags flags, float weight) #extcall;
Switcher SwitcherCreate(Element parent, ElementFlags flags) #extcall;
TabPane TabPaneCreate(Element parent, ElementFlags flags, str tabs) #extcall;
Table TableCreate(Element parent, ElementFlags flags, str columns) #extcall;
Textbox TextboxCreate(Element parent, TextboxFlags flags) #extcall;
WrapPanel WrapPanelCreate(Element parent, ElementFlags flags) #extcall;

Window WindowCreate(Window owner, WindowFlags flags, str title, int width, int height) #extcall;
Element ElementCreate(Element parent, ElementFlags flags, MessageCallback messageClass) #extcall;

bool ElementIsEqualTo(Element element, Element otherElement) #extcall; // HACK handletypes cannot be compared...

gm.Rectangle ElementScreenBounds(Element element) #extcall;
// int ElementMessage(Element element, Message message, int di, MessageData dp) #extcall;
void ElementMove(Element element, gm.Rectangle bounds, bool alwaysLayout) #extcall;
void ElementRepaint(Element element, gm.Rectangle region) #extcall;
gm.Rectangle ElementWindowBounds(Element element) #extcall;
gm.Rectangle ElementGetClip(Element element) #extcall;
bool ElementAnimate(Element element, bool stop) #extcall;
Element ElementChangeParent(Element element, Element newParent, Element insertBefore) #extcall;
void ElementDestroy(Element element) #extcall;
void ElementDestroyDescendents(Element element) #extcall;
Element ElementFindByPoint(Element element, int x, int y) #extcall;
void ElementFocus(Element element) #extcall;
str ElementGetClassName(Element element) #extcall;
anytype ElementGetContextUser(Element element) #extcall;
anytype ElementGetContextClass(Element element) #extcall;
ElementFlags ElementGetFlags(Element element) #extcall;
Element ElementGetParent(Element element) #extcall;
Window ElementGetWindow(Element element) #extcall;
void ElementMeasurementsChanged(Element element, int which) #extcall;
void ElementRefresh(Element element) #extcall;
void ElementRelayout(Element element) #extcall;
void ElementSetFlags(Element element, ElementFlags flags) #extcall;
void ElementSetMessageUser(Element element, MessageCallback callback) #extcall;
void ElementSetContextUser(Element element, anytype context) #extcall;
void ElementSetContextClass(Element element, anytype context) #extcall;

float WindowGetScale(Window window) #extcall;
// Element WindowGetHoveredElement(Window window) #extcall;
// Element WindowGetPressedElement(Window window) #extcall;
// Element WindowGetFocusedElement(Window window) #extcall;
int WindowGetPressedMouseButton(Window window) #extcall;
int WindowGetCursorX(Window window) #extcall;
int WindowGetCursorY(Window window) #extcall;
bool WindowGetTextboxModifiedFlag(Window window) #extcall;
void WindowSetTextboxModifiedFlag(Window window, bool flag) #extcall;
bool WindowIsCtrlHeld(Window window) #extcall;
bool WindowIsShiftHeld(Window window) #extcall;
bool WindowIsAltHeld(Window window) #extcall;
// void WindowRegisterShortcut(Window window, Shortcut shortcut) #extcall;
void WindowPack(Window window, int width) #extcall;

void GaugeSetPosition(Gauge gauge, float value) #extcall;

void ButtonSetLabel(Button button, str string) #extcall;
// void ButtonSetInvoke(Button button, InvokeCallback invoke) #extcall;

void LabelSetContent(Label label, str string) #extcall;

// void SwitcherSwitchTo(Switcher switcher, Element child) #extcall;

void PanelSetSpacing(Panel panel, gm.Rectangle border, int gap) #extcall;

void ImageDisplaySetContent(ImageDisplay display, im.Bitmap bitmap) #extcall;

inttype CheckState { CHECK_UNCHECKED = 0; CHECK_CHECKED = 1; CHECK_INDETERMINATE = 2; };
void CheckboxSetCheck(Checkbox checkbox, CheckState check) #extcall;
CheckState CheckboxGetCheck(Checkbox checkbox) #extcall;
// void CheckboxSetInvoke(Checkbox checkbox, InvokeCallback invoke) #extcall;

void SplitPaneSetWeight(SplitPane pane, float weight) #extcall;
float SplitPaneGetWeight(SplitPane pane) #extcall;

void TabPaneSetActive(TabPane pane, int index) #extcall;
int TabPaneGetActive(TabPane pane) #extcall;

void TableSetHighlightedColumn(Table table, int index) #extcall;
void TableSetItemCount(Table table, int count) #extcall;
int TableHitTest(Table table, int x, int y) #extcall; // Returns item index. Returns -1 if not on an item.
int TableHeaderHitTest(Table table, int x, int y) #extcall; // Returns column index or -1.
bool TableEnsureVisible(Table table, int index) #extcall; // Returns false if the item was already visible.
void TableResizeColumns(Table table) #extcall;

float SliderGetPosition(Slider slider) #extcall;
void SliderSetPosition(Slider slider, float position, bool sendChangedMessage) #extcall;
void SliderSetSteps(Slider slider, int steps) #extcall;

void TextboxReplace(Textbox textbox, str replacement, bool sendChangedMessage) #extcall;
void TextboxClear(Textbox textbox, bool sendChangedMessage) #extcall;
void TextboxMoveCaret(Textbox textbox, bool backward, bool word) #extcall;
str TextboxGetContents(Textbox textbox) #extcall;
void TextboxRejectNextKey(Textbox textbox) #extcall;
int TextboxGetSelectionFrom(Textbox textbox) #extcall;
int TextboxGetSelectionTo(Textbox textbox) #extcall;
void TextboxSetSelectionFrom(Textbox textbox, int index) #extcall;
void TextboxSetSelectionTo(Textbox textbox, int index) #extcall;
void TextboxSetCaretPosition(Textbox textbox, int index) #extcall;

void CodeFocusLine(Code code, int index) #extcall; // Line numbers are 1-indexed!!
int CodeHitTest(Code code, int x, int y) #extcall; // Returns line number; negates if in margin. Returns 0 if not on a line.
void CodeInsertContent(Code code, str content, bool replace) #extcall;
void CodeSetTabSize(Code code, int tabSize) #extcall;
int CodeGetLineCount(Code code) #extcall;
str CodeGetLineContent(Code code, int index) #extcall; // Line numbers are 1-indexed!!
// void CodeSetFont(Code code, Font font) #extcall;

// MDIChild MDIClientGetActiveChild(MDIClient client) #extcall;
// void MDIClientSetActiveChild(MDIClient client, MDIChild child) #extcall;
gm.Rectangle MDIChildGetBounds(MDIChild child) #extcall;
void MDIChildSetBounds(MDIChild child, gm.Rectangle bounds) #extcall;

void ScrollBarSetMaximumPosition(ScrollBar bar, int maximum) #extcall;
void ScrollBarSetPageSize(ScrollBar bar, int page) #extcall;
void ScrollBarSetPosition(ScrollBar bar, float position) #extcall;
float ScrollBarGetPosition(ScrollBar bar) #extcall;

int KeycodeBackspace() #extcall;
int KeycodeDelete() #extcall;
int KeycodeDown() #extcall;
int KeycodeEnd() #extcall;
int KeycodeEnter() #extcall;
int KeycodeEscape() #extcall;
int KeycodeHome() #extcall;
int KeycodeInsert() #extcall;
int KeycodeLeft() #extcall;
int KeycodeRight() #extcall;
int KeycodeSpace() #extcall;
int KeycodeTab() #extcall;
int KeycodeUp() #extcall;
int KeycodeLetter(str x) #extcall;
int KeycodeDigit(str x) #extcall;
int KeycodeFKey(int x) #extcall;

// tuple[bool, float, float, float] ColorToHSV(int rgb); // Returns: is hue guessed, hue, saturation, value.
// int ColorToRGB(float hue, float saturation, float value);
float ColorGetAlpha01(int argb) { return ((argb >> 24) & 0xFF):float() / 255.0; }
float ColorGetRed01(int argb) { return ((argb >> 16) & 0xFF):float() / 255.0; }
float ColorGetGreen01(int argb) { return ((argb >> 8) & 0xFF):float() / 255.0; }
float ColorGetBlue01(int argb) { return ((argb >> 0) & 0xFF):float() / 255.0; }
int ColorGetAlpha(int argb) { return ((argb >> 24) & 0xFF); }
int ColorGetRed(int argb) { return ((argb >> 16) & 0xFF); }
int ColorGetGreen(int argb) { return ((argb >> 8) & 0xFF); }
int ColorGetBlue(int argb) { return ((argb >> 0) & 0xFF); }
int ColorFromFloat01(float a, float r, float g, float b) { return ((a * 255.0):truncate() << 24) | ((r * 255.0):truncate() << 16) | ((g * 255.0):truncate() << 8) | ((b * 255.0):truncate() << 0); }

int PainterGetWidth(Painter painter) #extcall;
int PainterGetHeight(Painter painter) #extcall;
gm.Rectangle PainterGetClip(Painter painter) #extcall;

// Font FontCreate(str path, int size) #extcall;
// Font FontActivate(Font font) #extcall; // Returns the previously active font.
// int FontGetGlyphWidth(Font font) #extcall;
// int FontGetGlyphHeight(Font font) #extcall;

void DrawBlock(Painter painter, gm.Rectangle rectangle, int color) #extcall;
void DrawCircle(Painter painter, int centerX, int centerY, int radius, int fillColor, int outlineColor, bool hollow) #extcall;
void DrawInvert(Painter painter, gm.Rectangle rectangle) #extcall;
bool DrawLine(Painter painter, int x0, int y0, int x1, int y1, int color) #extcall; // Returns false if the line was not visible.
void DrawTriangle(Painter painter, int x0, int y0, int x1, int y1, int x2, int y2, int color) #extcall;
void DrawTriangleOutline(Painter painter, int x0, int y0, int x1, int y1, int x2, int y2, int color) #extcall;
void DrawGlyph(Painter painter, int x, int y, int c, int color) #extcall;
void DrawRectangle(Painter painter, gm.Rectangle r, int mainColor, int borderColor, gm.Rectangle borderSize) #extcall;
void DrawBorder(Painter painter, gm.Rectangle r, int borderColor, gm.Rectangle borderSize) #extcall;
void DrawString(Painter painter, gm.Rectangle r, str string, int color, Align align, StringSelection selection) #extcall;
int  DrawStringHighlighted(Painter painter, gm.Rectangle r, str string, int tabSize) #extcall; // Returns final x position.

int MeasureStringWidth(str string) #extcall;
int MeasureStringHeight() #extcall;

int AnimateClock() #extcall; // In ms.

// Element ParentPush(Element element) #extcall;
// Element ParentPop() #extcall;

// Menu MenuCreate(Element parent, MenuFlags flags) #extcall;
// void MenuAddItem(Menu menu, ButtonFlags flags, str label, InvokeCallback invoke, anytype cp) #extcall;
// void MenuShow(Menu menu) #extcall;
// bool MenuIsOpen() #extcall;

functype anytype _InternalWrapPainterInAnytypeFunctype(Painter object);
anytype _InternalWrapPainterInAnytype(Painter object) { anytype a = object; return a; }
functype anytype _InternalWrapTableGetItemInAnytypeFunctype(TableGetItem object);
anytype _InternalWrapTableGetItemInAnytype(TableGetItem object) { anytype a = object; return a; }
functype anytype _InternalWrapKeyTypedInAnytypeFunctype(KeyTyped object);
anytype _InternalWrapKeyTypedInAnytype(KeyTyped object) { anytype a = object; return a; }
void _InternalInitialise(_InternalWrapPainterInAnytypeFunctype wrap0, _InternalWrapTableGetItemInAnytypeFunctype wrap1, _InternalWrapKeyTypedInAnytypeFunctype wrap2) #extcall;
void Initialise() { _InternalInitialise(_InternalWrapPainterInAnytype, _InternalWrapTableGetItemInAnytype, _InternalWrapKeyTypedInAnytype); }
